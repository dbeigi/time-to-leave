const test = require('tape')
const {
    minutesToHourFormated, 
    subtractTime, 
    sumTime, 
    validateTime
} = require('../js/time-math.js');

// Format hours test
test('Format hours 00:01', (t) => {
    t.assert(minutesToHourFormated(1) === '00:01', "Correct format")
    t.end()  
})
test('Format hours 00:00', (t) => {
    t.assert(minutesToHourFormated(0) === '00:00', "Correct format")
    t.end()  
})
test('Format hours -00:01', (t) => {
    t.assert(minutesToHourFormated(-1) === '-00:01', "Correct format")
    t.end()  
})
test('Format hours -00:59', (t) => {
    t.assert(minutesToHourFormated(-59) === '-00:59', "Correct format")
    t.end()  
})
test('Format hours -01:00', (t) => {
    t.assert(minutesToHourFormated(-60) === '-01:00', "Correct format")
    t.end()  
})
test('Format hours -01:01', (t) => {
    t.assert(minutesToHourFormated(-61) === '-01:01', "Correct format")
    t.end()  
})
test('Format hours 00:59', (t) => {
    t.assert(minutesToHourFormated(59) === '00:59', "Correct format")
    t.end()  
})
test('Format hours 01:00', (t) => {
    t.assert(minutesToHourFormated(60) === '01:00', "Correct format")
    t.end()  
})
test('Format hours 01:01', (t) => {
    t.assert(minutesToHourFormated(61) === '01:01', "Correct format")
    t.end()  
})

// Subtract time
test('Subtract time 1:00 - 1:00', (t) => {
    t.assert(subtractTime('1:00', '1:00') === '00:00', "Subtract time")
    t.end()  
})
test('Subtract time 00:00 - 00:00', (t) => {
    t.assert(subtractTime('00:00', '00:00') === '00:00', "Subtract time 00:00 - 00:00 = 00:00")
    t.end()  
})
test('Subtract time 01:00 - 00:01', (t) => {
    t.assert(subtractTime('00:01', '01:00') === '00:59', "Subtract time 01:00 - 00:01 = 00:59")
    t.end()  
})
test('Subtract time 12:00 - 13:00', (t) => {
    t.assert(subtractTime('13:00', '12:00') === '-01:00', "Subtract time 12:00 - 13:00 = -01:00")
    t.end()  
})
test('Subtract time 24:00 - 48:00', (t) => {
    t.assert(subtractTime('48:00', '24:00') === '-24:00', "Subtract time 24:00 - 48:00 = -24:00")
    t.end()  
})
test('Subtract time 12:00 - 00:01', (t) => {
    t.assert(subtractTime('00:01', '12:00') === '11:59', "Subtract time 12:00 - 00:01 = 11:59")
    t.end()  
})
test('Subtract time 12:00 - 13:00', (t) => {
    t.assert(subtractTime('13:00', '12:00') === '-01:00', "Subtract time 13:00 - 12:00 = -01:00")
    t.end()  
})

test('Subtract time 00:00 - 13:00', (t) => {
    t.assert(subtractTime('13:00', '00:00') === '-13:00', "Subtract time 00:00 - 13:00 = -13:00")
    t.end()  
})

// Sum time
test('Add time 00:00 + 00:00', (t) => {
    t.assert(sumTime('00:00', '00:00') === '00:00', "Add time 00:00 + 00:00 = 00:00")
    t.end()  
})
test('Add time 00:00 + 00:01', (t) => {
    t.assert(sumTime('00:00', '00:01') === '00:01', "Add time 00:00 + 00:01 = 00:01")
    t.end()  
})
test('Add time 00:59 + 00:01', (t) => {
    t.assert(sumTime('00:59', '00:01') === '01:00', "Add time 00:59 + 00:01 = 01:00")
    t.end()  
})
test('Add time 12:00 + 12:00', (t) => {
    t.assert(sumTime('12:00', '12:00') === '24:00', "Add time 12:00 + 12:00 = 24:00")
    t.end()  
})
test('Add time 12:00 + -12:00', (t) => {
    t.assert(sumTime('12:00', '-12:00') === '00:00', "Add time 12:00 + -12:00 = 00:00")
    t.end()  
})

// Valid time
test('Valid time 00:00', (t) => {
    t.assert(validateTime('00:00') === true, "Validate time 00:00")
    t.end()  
})
test('Valid time 00:01', (t) => {
    t.assert(validateTime('00:01') === true, "Validate time 00:01")
    t.end()  
})
test('Valid time 00:11', (t) => {
    t.assert(validateTime('00:11') === true, "Validate time 00:11")
    t.end()  
})
test('Valid time 01:11', (t) => {
    t.assert(validateTime('01:11') === true, "Validate time 01:11")
    t.end()  
})
test('Valid time 11:11', (t) => {
    t.assert(validateTime('11:11') === true, "Validate time 11:11")
    t.end()  
})
test('Valid time 24:00', (t) => {
    t.assert(validateTime('24:00') === true, "Validate time 24:00")
    t.end()  
})
test('Valid time -04:00', (t) => {
    t.assert(validateTime('-04:00') === true, "Validate time -4:00")
    t.end()  
})
test('Valid time 34:00', (t) => {
    t.assert(validateTime('34:00') === false, "Validate time 34:00")
    t.end()  
})
test('Valid time 4:00', (t) => {
    t.assert(validateTime('4:00') === false, "Validate time 4:00")
    t.end()  
})
test('Valid time 00:1', (t) => {
    t.assert(validateTime('00:1') === false, "Validate time 00:1")
    t.end()  
})
test('Valid time --:--', (t) => {
    t.assert(validateTime('--:--') === false, "Validate time --:--")
    t.end()  
})